/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package chatter;

/**
 *
 * @author maggiecelentano
 */
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Server
{
    //The ServerSocket we'll be using for accepting new connections
    private ServerSocket ss;

    // A mapping from sockets to DataOutputStreams.  This will

    // help us avoid having to create a DataOutputStream each time

    // we want to write to a stream.

    //private Hashtable outputStreams = new Hashtable();
    private ArrayList<String> usernames = new ArrayList<String>();
    private ArrayList<ServerThread> serverThreads = new ArrayList<ServerThread>();
    private int size = 0;

    // Constructor and while-accept loop all in one.


    public Server(int port) throws IOException
    {

      // All we have to do is listen

       listen(port);

    }

    // Main routine

    // Usage: java Server >port<

     static public void main(String args[]) throws Exception
     {

        // Get the port # from the command line

        int port = 2400;


        // Create a Server object, which will automatically begin

        // accepting connections.

        new Server(port);
     }

     private void listen(int port) throws IOException
     {

        // Create the ServerSocket

        ss = new ServerSocket(port);


        // Tell the world we're ready to go

        System.out.println("Listening on "+ss);


        // Keep accepting connections forever
        
        while(true)
        {
            
           // Grab the next incoming connection
           
           Socket s = ss.accept();

           // Tell the world we've got it

           System.out.println("Connection from "+s);


           // Create a DataOutputStream for writing data to the

           // other side

           DataOutputStream dout = new DataOutputStream(s.getOutputStream());

           // Save this stream so we don't need to make it again

           //outputStreams.put(s, dout);


           // Create a new thread for this connection, and then forget

           // about it

           ServerThread aServerThread = new ServerThread(this, s, dout);
           serverThreads.add(aServerThread);
           size++;
        }
     }

   // Send a message to all clients (utility routine)

     void sendToAll(String message, int x) throws IOException
     {

     // We synchronize on this because another thread might be
     // calling removeConnection() and this would screw us up
     // as we tried to walk through the list

     synchronized(serverThreads) {

         for(int i = 0; i<size;i++)
         {
             Socket aSocket = serverThreads.get(i).getSocket();
             DataOutputStream dout = null;
             if(aSocket.getPort() != x)
             {
             try
                {
                    dout = new DataOutputStream(aSocket.getOutputStream());
                }
                catch (IOException ex)
                {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                  dout.writeUTF("ALL" + message);

                } catch( IOException ie )
                {
                  System.out.println( ie );
                }
             }//end if
         }//end for-loop
       }//end sync
     }//end sendToAll method

     /*
     Remove a socket, and it's corresponding output stream, from our
      list.  This is usually called by a connection thread that has
      discovered that the connectin to the client is dead.
      */
     void removeConnection(Socket s)
     {

        // Synchronize so we don't mess up sendToAll() while it walks
        // down the list of all output streamsa

        synchronized(serverThreads) {

        // Tell the world

        System.out.println( "Removing connection to "+s );

        //Remove it from our hashtable/list

        //outputStreams.remove( s );

        String username = "";
        int port;

        for(int i = 0; i<size; i++)
        {
            port = serverThreads.get(i).getSocket().getPort();
            
            if(port == s.getPort())
            {
                username = serverThreads.get(i).getUsername();
                serverThreads.remove(i);
                size--;
                break;
            }
        }

        System.out.println(size);
        // Make sure it's closed
        try
        {
            s.close();
        }
        catch( IOException ie )
        {
          System.out.println( "Error closing "+s );
          ie.printStackTrace();
        }

        for(int i = 0; i<size; i++)
        {
            System.out.println(serverThreads.get(i).getUsername());

        }

        removeUsername(username);
        
      }//end synch
     }//end removeConnection method

     void addUsername(String username)
    {
        synchronized(serverThreads){
        for(int i = 0; i<size; i++)
        {
            Socket socket = serverThreads.get(i).getSocket();
            DataOutputStream dout = null;
            try
            {
                dout = new DataOutputStream(socket.getOutputStream());
            }
            catch (IOException ex)
            {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }

            try
            {
                dout.writeUTF("NEW USER" + username);

            } catch( IOException ie )
                {
                  System.out.println( ie );
                }

        }//end for-loop
        }//end synch
    }//end addUsername method

    void getUsernames(Socket socket)
    {
        synchronized(serverThreads){
            DataOutputStream dout = null;

            try
            {
                dout = new DataOutputStream(socket.getOutputStream());
            }
            catch (IOException ex)
            {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }

            for(int i = 0; i<size;i++){
            if(serverThreads.get(i).getSocket().getPort() != socket.getPort())
            {
                try
                {
                    dout.writeUTF("ADDING USERS" + serverThreads.get(i).getUsername());

                }
                catch( IOException ie )
                {
                   System.out.println( ie );
                }
            }
            }//end for-loop
        }//end synch
    }//end getUsername method

    void sendSpecific(String message, String senderUserName)
    {
        synchronized(serverThreads){
        for(int i = 0; i<size;i++){

            DataOutputStream dout = null;
            if(message.startsWith(serverThreads.get(i).getUsername()))
            {
                Socket socket = serverThreads.get(i).getSocket();
                int x = serverThreads.get(i).getUsername().length();

                try
                {
                    dout = new DataOutputStream(socket.getOutputStream());
                }
                catch (IOException ex)
                {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }

                try
                {
                    dout.writeUTF(senderUserName + ":" + message.substring(x,message.length()));
                } catch( IOException ie )
                {
                    System.out.println( ie );
                }
            }
        }//end for-loop
        }//end synch
    }//end sendSpecific method

    private void removeUsername(String username)
    {
     synchronized(serverThreads){
        for(int i = 0; i<size; i++)
        {
            Socket socket = serverThreads.get(i).getSocket();
            DataOutputStream dout = null;

            try
            {
                dout = new DataOutputStream(socket.getOutputStream());
            }
            catch (IOException ex)
            {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }

            try
            {
                dout.writeUTF("REMOVE USER" + username);

            } catch( IOException ie )
                {
                  System.out.println( ie );
                }

        }//end for-loop
      }//end synch
    }//end removeUsername method
}//end Server class

