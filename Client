/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package chatter;

/**
 *
 * @author maggiecelentano
 */
import java.applet.*;

import java.awt.*;

import java.awt.event.*;

import java.io.*;

import java.net.*;
import javax.swing.*;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class Client implements Runnable
{
   // Components for the visual display of the chat windows

    private JTextField tf = new JTextField();
    private JTextArea ta = new JTextArea();
    private JFrame frame = new JFrame("Chatter");

    private JFrame loginFrame = new JFrame("Login");
    private JTextField loginText = new JTextField();

    private Button chatButton;

    private String[] users = new String[5];

    private String username;

   JList list;

   // The socket connecting us to the server

    private Socket socket;

    // The streams we communicate to the server; these come

    // from the socket

    private DataOutputStream dout;

    private DataInputStream din;


   // Constructor

   public Client(final String host, final int port)
   {
       try
       {

         // Initiate the connection

         socket = new Socket(host, port);

         // We got a connection!  Tell the world

         System.out.println("connected to "+socket);


         // Let's grab the streams and create DataInput/Output streams

         // from them

         din = new DataInputStream(socket.getInputStream());

         dout = new DataOutputStream(socket.getOutputStream());


         // Start a background thread for receiving messages

         new Thread(this).start();

       }
       catch(IOException ie)
       {
         System.out.println( ie );
       }

       loginFrame.setPreferredSize(new Dimension(300, 200));
       loginFrame.add("Center", loginText);
       loginFrame.setVisible(true);

      loginText.addActionListener(new ActionListener()
      {

         public void actionPerformed(ActionEvent e)
         {

             processLogin(e.getActionCommand());
         }
      });

   }//end Constructor

   private void processLogin(String username)
    {
        try
        {
            dout.writeUTF(username);
        }
        catch( IOException ie )
        {
            System.out.println( ie );
        }

        this.username = username;
        loginFrame.setVisible(false);

        users[0] = username;
        list = new JList(users);
        list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        list.setLayoutOrientation(JList.VERTICAL);
        list.setVisibleRowCount(5);


        JScrollPane listScroller = new JScrollPane(list);
        listScroller.setPreferredSize(new Dimension(250, 80));
        list.setVisible(true);
        listScroller.setVisible(true);


      ta.setBackground(Color.PINK);
      tf.setBackground(Color.GRAY);
      //ta.setLineWrap(true);

      ta.setWrapStyleWord(true);
      ta.setEditable(false);
      //ta.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

      frame.setPreferredSize(new Dimension(300, 200));

      frame.setLayout(new BorderLayout());

      frame.add( "South", tf );

      frame.add( "Center", ta );

      frame.add("North",listScroller);

      //What happens when the frame closes?
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


      //Size the frame.
      frame.pack();

      frame.setVisible(true);

      // We want to receive messages when someone types a line

      // and hits return, using an anonymous class as

      // a callback

      tf.addActionListener(new ActionListener()
      {

         public void actionPerformed(ActionEvent e)
         {

             processMessage(e.getActionCommand());
         }
      });

       // Connect to the server
   }


    // Gets called when the user types something

    private void processMessage(String message)
    {
      try
      {

         // Send it to the server

         dout.writeUTF( message );

         // Clear out text input field
         ta.append("\t\t" + message + "\n");
         tf.setText( "" );

      }
      catch( IOException ie )
      {
         System.out.println( ie );
      }
    }//end processMessage method

    // Background thread runs this: show messages from other window

    public void run()
    {
      try
      {

         // Receive messages one-by-one, forever

         while (true)
         {

            // Get the next message

            String message = din.readUTF();
            

            // Print it to our text window
            
            ta.append(message + "\n");

         }

      }
      catch( IOException ie )
      {
         System.out.println( ie );
      }

    }

    public String getUsername()
    {
        return this.username;
    }

    public static void main(String[] args)
    {
        Client client = new Client("localhost",2400);

    }
}//end Client class



